// <auto-generated />
using System;
using CenterEnd.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CenterEnd.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240501152134_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CenterEnd.Database.Entities.Concrete.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeckName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("CenterEnd.Database.Entities.Concrete.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeckId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PlaceDescription")
                        .HasColumnType("text");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceYX")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("CenterEnd.Database.Entities.Concrete.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CenterEnd.Database.Entities.Concrete.Territory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginYX")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("CenterEnd.Database.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserInteractionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserInteractionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CenterEnd.Database.Entities.Concrete.UserInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserInteractions");
                });

            modelBuilder.Entity("PlaceTag", b =>
                {
                    b.Property<int>("PlacesId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("PlacesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PlaceTag");
                });

            modelBuilder.Entity("PlaceUserInteraction", b =>
                {
                    b.Property<int>("LikedPlacesId")
                        .HasColumnType("integer");

                    b.Property<int>("LikedUserInteractionId")
                        .HasColumnType("integer");

                    b.HasKey("LikedPlacesId", "LikedUserInteractionId");

                    b.HasIndex("LikedUserInteractionId");

                    b.ToTable("LikedPlaces", (string)null);
                });

            modelBuilder.Entity("PlaceUserInteraction1", b =>
                {
                    b.Property<int>("PassedPlacesId")
                        .HasColumnType("integer");

                    b.Property<int>("PassedUserInteractionId")
                        .HasColumnType("integer");

                    b.HasKey("PassedPlacesId", "PassedUserInteractionId");

                    b.HasIndex("PassedUserInteractionId");

                    b.ToTable("PassedPlaces", (string)null);
                });

            modelBuilder.Entity("CenterEnd.Database.Entities.Concrete.Deck", b =>
                {
                    b.HasOne("CenterEnd.Database.Entities.Concrete.User", "OwnerUser")
                        .WithMany("OwnedDecks")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("CenterEnd.Database.Entities.Concrete.Place", b =>
                {
                    b.HasOne("CenterEnd.Database.Entities.Concrete.Deck", null)
                        .WithMany("PlacesOfDeck")
                        .HasForeignKey("DeckId");

                    b.HasOne("CenterEnd.Database.Entities.Concrete.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("CenterEnd.Database.Entities.Concrete.User", b =>
                {
                    b.HasOne("CenterEnd.Database.Entities.Concrete.UserInteraction", "UserInteraction")
                        .WithMany()
                        .HasForeignKey("UserInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInteraction");
                });

            modelBuilder.Entity("PlaceTag", b =>
                {
                    b.HasOne("CenterEnd.Database.Entities.Concrete.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CenterEnd.Database.Entities.Concrete.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaceUserInteraction", b =>
                {
                    b.HasOne("CenterEnd.Database.Entities.Concrete.Place", null)
                        .WithMany()
                        .HasForeignKey("LikedPlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CenterEnd.Database.Entities.Concrete.UserInteraction", null)
                        .WithMany()
                        .HasForeignKey("LikedUserInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaceUserInteraction1", b =>
                {
                    b.HasOne("CenterEnd.Database.Entities.Concrete.Place", null)
                        .WithMany()
                        .HasForeignKey("PassedPlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CenterEnd.Database.Entities.Concrete.UserInteraction", null)
                        .WithMany()
                        .HasForeignKey("PassedUserInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CenterEnd.Database.Entities.Concrete.Deck", b =>
                {
                    b.Navigation("PlacesOfDeck");
                });

            modelBuilder.Entity("CenterEnd.Database.Entities.Concrete.User", b =>
                {
                    b.Navigation("OwnedDecks");
                });
#pragma warning restore 612, 618
        }
    }
}
